// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GeoImage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Geoimage {

  /// <summary>Holder for reflection information generated from GeoImage.proto</summary>
  public static partial class GeoImageReflection {

    #region Descriptor
    /// <summary>File descriptor for GeoImage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeoImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5HZW9JbWFnZS5wcm90bxIIZ2VvaW1hZ2UaH2dvb2dsZS9wcm90b2J1Zi90",
            "aW1lc3RhbXAucHJvdG8itwIKBERhdGESEQoJZGF0YV9uYW1lGAEgASgJEi0K",
            "CXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "NgoSb3JpZ2luYWxfdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBILCgN1aWQYBCABKAkSEwoLbW9kdWxlX25hbWUYBSABKAkS",
            "EQoJY29uZmlnX2lkGAYgASgJEhgKEGFjcXVpc2l0aW9uX3NpdGUYByABKAkS",
            "EQoJZGV2aWNlX2lkGAggASgJEhMKC3NlbnNvcl9uYW1lGAkgASgJEhEKCWRh",
            "dGFfdHlwZRgKIAEoCRIbChNhY3F1aXNpdGlvbl9yYXRlX2h6GAsgASgBEg4K",
            "Bm51bV9pZBgMIAEoBSKIAgoHR2VvRGF0YRIdChVkYXRhX3Bvc2l0aW9uX3hf",
            "aW5fbW0YASABKAISHQoVZGF0YV9wb3NpdGlvbl95X2luX21tGAIgASgCEhEK",
            "CWNsb2NrdGljaxgDIAEoAxInCh9jbG9ja3RpY2tfZGF0YV9wb3NpdGlvbl94",
            "X2luX21tGAQgASgCEh4KFmNvbnZleW9yX3NwZWVkX21fcGVyX3MYBSABKAIS",
            "GQoRY291bnRlcl9mYWN0b3JfbW0YBiABKAISFQoNY291bnRlcl9iZWdpbhgH",
            "IAEoAxITCgtjb3VudGVyX2VuZBgIIAEoAxIcCgRkYXRhGAkgASgLMg4uZ2Vv",
            "aW1hZ2UuRGF0YSKMAgoIR2VvSW1hZ2USEgoKaW1hZ2VfZGF0YRgBIAEoDBIO",
            "CgZmb3JtYXQYAiABKAkSEwoLd2lkdGhfaW5fbW0YAyABKAISEwoLd2lkdGhf",
            "aW5fcHgYBCABKAUSFAoMaGVpZ2h0X2luX21tGAUgASgCEhQKDGhlaWdodF9p",
            "bl9weBgGIAEoBRI3ChJjb252ZXlvcl9kaXJlY3Rpb24YByABKA4yGy5nZW9p",
            "bWFnZS5Db252ZXllckRpcmVjdGlvbhIXCg9zdGF0dXNfbGlnaHRpbmcYCCAB",
            "KAUSEAoIZmlsZW5hbWUYCSABKAkSIgoHZ2VvZGF0YRgKIAEoCzIRLmdlb2lt",
            "YWdlLkdlb0RhdGEqOgoRQ29udmV5ZXJEaXJlY3Rpb24SBgoCVVAQABIICgRE",
            "T1dOEAESCAoETEVGVBACEgkKBVJJR0hUEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Geoimage.ConveyerDirection), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Geoimage.Data), global::Geoimage.Data.Parser, new[]{ "DataName", "Timestamp", "OriginalTimestamp", "Uid", "ModuleName", "ConfigId", "AcquisitionSite", "DeviceId", "SensorName", "DataType", "AcquisitionRateHz", "NumId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Geoimage.GeoData), global::Geoimage.GeoData.Parser, new[]{ "DataPositionXInMm", "DataPositionYInMm", "Clocktick", "ClocktickDataPositionXInMm", "ConveyorSpeedMPerS", "CounterFactorMm", "CounterBegin", "CounterEnd", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Geoimage.GeoImage), global::Geoimage.GeoImage.Parser, new[]{ "ImageData", "Format", "WidthInMm", "WidthInPx", "HeightInMm", "HeightInPx", "ConveyorDirection", "StatusLighting", "Filename", "Geodata" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ConveyerDirection {
    [pbr::OriginalName("UP")] Up = 0,
    [pbr::OriginalName("DOWN")] Down = 1,
    [pbr::OriginalName("LEFT")] Left = 2,
    [pbr::OriginalName("RIGHT")] Right = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Data : pb::IMessage<Data>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Geoimage.GeoImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data(Data other) : this() {
      dataName_ = other.dataName_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      originalTimestamp_ = other.originalTimestamp_ != null ? other.originalTimestamp_.Clone() : null;
      uid_ = other.uid_;
      moduleName_ = other.moduleName_;
      configId_ = other.configId_;
      acquisitionSite_ = other.acquisitionSite_;
      deviceId_ = other.deviceId_;
      sensorName_ = other.sensorName_;
      dataType_ = other.dataType_;
      acquisitionRateHz_ = other.acquisitionRateHz_;
      numId_ = other.numId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Data Clone() {
      return new Data(this);
    }

    /// <summary>Field number for the "data_name" field.</summary>
    public const int DataNameFieldNumber = 1;
    private string dataName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DataName {
      get { return dataName_; }
      set {
        dataName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "original_timestamp" field.</summary>
    public const int OriginalTimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp originalTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OriginalTimestamp {
      get { return originalTimestamp_; }
      set {
        originalTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "module_name" field.</summary>
    public const int ModuleNameFieldNumber = 5;
    private string moduleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModuleName {
      get { return moduleName_; }
      set {
        moduleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 6;
    private string configId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acquisition_site" field.</summary>
    public const int AcquisitionSiteFieldNumber = 7;
    private string acquisitionSite_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AcquisitionSite {
      get { return acquisitionSite_; }
      set {
        acquisitionSite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 8;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sensor_name" field.</summary>
    public const int SensorNameFieldNumber = 9;
    private string sensorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SensorName {
      get { return sensorName_; }
      set {
        sensorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 10;
    private string dataType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DataType {
      get { return dataType_; }
      set {
        dataType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acquisition_rate_hz" field.</summary>
    public const int AcquisitionRateHzFieldNumber = 11;
    private double acquisitionRateHz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AcquisitionRateHz {
      get { return acquisitionRateHz_; }
      set {
        acquisitionRateHz_ = value;
      }
    }

    /// <summary>Field number for the "num_id" field.</summary>
    public const int NumIdFieldNumber = 12;
    private int numId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumId {
      get { return numId_; }
      set {
        numId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataName != other.DataName) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(OriginalTimestamp, other.OriginalTimestamp)) return false;
      if (Uid != other.Uid) return false;
      if (ModuleName != other.ModuleName) return false;
      if (ConfigId != other.ConfigId) return false;
      if (AcquisitionSite != other.AcquisitionSite) return false;
      if (DeviceId != other.DeviceId) return false;
      if (SensorName != other.SensorName) return false;
      if (DataType != other.DataType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AcquisitionRateHz, other.AcquisitionRateHz)) return false;
      if (NumId != other.NumId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DataName.Length != 0) hash ^= DataName.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (originalTimestamp_ != null) hash ^= OriginalTimestamp.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (ModuleName.Length != 0) hash ^= ModuleName.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (AcquisitionSite.Length != 0) hash ^= AcquisitionSite.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (SensorName.Length != 0) hash ^= SensorName.GetHashCode();
      if (DataType.Length != 0) hash ^= DataType.GetHashCode();
      if (AcquisitionRateHz != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AcquisitionRateHz);
      if (NumId != 0) hash ^= NumId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DataName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataName);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (originalTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OriginalTimestamp);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (ModuleName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ModuleName);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConfigId);
      }
      if (AcquisitionSite.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AcquisitionSite);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceId);
      }
      if (SensorName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SensorName);
      }
      if (DataType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DataType);
      }
      if (AcquisitionRateHz != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AcquisitionRateHz);
      }
      if (NumId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DataName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DataName);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (originalTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OriginalTimestamp);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uid);
      }
      if (ModuleName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ModuleName);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConfigId);
      }
      if (AcquisitionSite.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AcquisitionSite);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceId);
      }
      if (SensorName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SensorName);
      }
      if (DataType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DataType);
      }
      if (AcquisitionRateHz != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AcquisitionRateHz);
      }
      if (NumId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DataName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataName);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (originalTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginalTimestamp);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (ModuleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleName);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConfigId);
      }
      if (AcquisitionSite.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AcquisitionSite);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (SensorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorName);
      }
      if (DataType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataType);
      }
      if (AcquisitionRateHz != 0D) {
        size += 1 + 8;
      }
      if (NumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Data other) {
      if (other == null) {
        return;
      }
      if (other.DataName.Length != 0) {
        DataName = other.DataName;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.originalTimestamp_ != null) {
        if (originalTimestamp_ == null) {
          OriginalTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OriginalTimestamp.MergeFrom(other.OriginalTimestamp);
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.ModuleName.Length != 0) {
        ModuleName = other.ModuleName;
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.AcquisitionSite.Length != 0) {
        AcquisitionSite = other.AcquisitionSite;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.SensorName.Length != 0) {
        SensorName = other.SensorName;
      }
      if (other.DataType.Length != 0) {
        DataType = other.DataType;
      }
      if (other.AcquisitionRateHz != 0D) {
        AcquisitionRateHz = other.AcquisitionRateHz;
      }
      if (other.NumId != 0) {
        NumId = other.NumId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DataName = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            if (originalTimestamp_ == null) {
              OriginalTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OriginalTimestamp);
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            ModuleName = input.ReadString();
            break;
          }
          case 50: {
            ConfigId = input.ReadString();
            break;
          }
          case 58: {
            AcquisitionSite = input.ReadString();
            break;
          }
          case 66: {
            DeviceId = input.ReadString();
            break;
          }
          case 74: {
            SensorName = input.ReadString();
            break;
          }
          case 82: {
            DataType = input.ReadString();
            break;
          }
          case 89: {
            AcquisitionRateHz = input.ReadDouble();
            break;
          }
          case 96: {
            NumId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DataName = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 26: {
            if (originalTimestamp_ == null) {
              OriginalTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OriginalTimestamp);
            break;
          }
          case 34: {
            Uid = input.ReadString();
            break;
          }
          case 42: {
            ModuleName = input.ReadString();
            break;
          }
          case 50: {
            ConfigId = input.ReadString();
            break;
          }
          case 58: {
            AcquisitionSite = input.ReadString();
            break;
          }
          case 66: {
            DeviceId = input.ReadString();
            break;
          }
          case 74: {
            SensorName = input.ReadString();
            break;
          }
          case 82: {
            DataType = input.ReadString();
            break;
          }
          case 89: {
            AcquisitionRateHz = input.ReadDouble();
            break;
          }
          case 96: {
            NumId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GeoData : pb::IMessage<GeoData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeoData> _parser = new pb::MessageParser<GeoData>(() => new GeoData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GeoData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Geoimage.GeoImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoData(GeoData other) : this() {
      dataPositionXInMm_ = other.dataPositionXInMm_;
      dataPositionYInMm_ = other.dataPositionYInMm_;
      clocktick_ = other.clocktick_;
      clocktickDataPositionXInMm_ = other.clocktickDataPositionXInMm_;
      conveyorSpeedMPerS_ = other.conveyorSpeedMPerS_;
      counterFactorMm_ = other.counterFactorMm_;
      counterBegin_ = other.counterBegin_;
      counterEnd_ = other.counterEnd_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoData Clone() {
      return new GeoData(this);
    }

    /// <summary>Field number for the "data_position_x_in_mm" field.</summary>
    public const int DataPositionXInMmFieldNumber = 1;
    private float dataPositionXInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DataPositionXInMm {
      get { return dataPositionXInMm_; }
      set {
        dataPositionXInMm_ = value;
      }
    }

    /// <summary>Field number for the "data_position_y_in_mm" field.</summary>
    public const int DataPositionYInMmFieldNumber = 2;
    private float dataPositionYInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DataPositionYInMm {
      get { return dataPositionYInMm_; }
      set {
        dataPositionYInMm_ = value;
      }
    }

    /// <summary>Field number for the "clocktick" field.</summary>
    public const int ClocktickFieldNumber = 3;
    private long clocktick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Clocktick {
      get { return clocktick_; }
      set {
        clocktick_ = value;
      }
    }

    /// <summary>Field number for the "clocktick_data_position_x_in_mm" field.</summary>
    public const int ClocktickDataPositionXInMmFieldNumber = 4;
    private float clocktickDataPositionXInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ClocktickDataPositionXInMm {
      get { return clocktickDataPositionXInMm_; }
      set {
        clocktickDataPositionXInMm_ = value;
      }
    }

    /// <summary>Field number for the "conveyor_speed_m_per_s" field.</summary>
    public const int ConveyorSpeedMPerSFieldNumber = 5;
    private float conveyorSpeedMPerS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ConveyorSpeedMPerS {
      get { return conveyorSpeedMPerS_; }
      set {
        conveyorSpeedMPerS_ = value;
      }
    }

    /// <summary>Field number for the "counter_factor_mm" field.</summary>
    public const int CounterFactorMmFieldNumber = 6;
    private float counterFactorMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CounterFactorMm {
      get { return counterFactorMm_; }
      set {
        counterFactorMm_ = value;
      }
    }

    /// <summary>Field number for the "counter_begin" field.</summary>
    public const int CounterBeginFieldNumber = 7;
    private long counterBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CounterBegin {
      get { return counterBegin_; }
      set {
        counterBegin_ = value;
      }
    }

    /// <summary>Field number for the "counter_end" field.</summary>
    public const int CounterEndFieldNumber = 8;
    private long counterEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CounterEnd {
      get { return counterEnd_; }
      set {
        counterEnd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 9;
    private global::Geoimage.Data data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Geoimage.Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GeoData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GeoData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DataPositionXInMm, other.DataPositionXInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DataPositionYInMm, other.DataPositionYInMm)) return false;
      if (Clocktick != other.Clocktick) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClocktickDataPositionXInMm, other.ClocktickDataPositionXInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConveyorSpeedMPerS, other.ConveyorSpeedMPerS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CounterFactorMm, other.CounterFactorMm)) return false;
      if (CounterBegin != other.CounterBegin) return false;
      if (CounterEnd != other.CounterEnd) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DataPositionXInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DataPositionXInMm);
      if (DataPositionYInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DataPositionYInMm);
      if (Clocktick != 0L) hash ^= Clocktick.GetHashCode();
      if (ClocktickDataPositionXInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClocktickDataPositionXInMm);
      if (ConveyorSpeedMPerS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConveyorSpeedMPerS);
      if (CounterFactorMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CounterFactorMm);
      if (CounterBegin != 0L) hash ^= CounterBegin.GetHashCode();
      if (CounterEnd != 0L) hash ^= CounterEnd.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DataPositionXInMm != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DataPositionXInMm);
      }
      if (DataPositionYInMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DataPositionYInMm);
      }
      if (Clocktick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Clocktick);
      }
      if (ClocktickDataPositionXInMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ClocktickDataPositionXInMm);
      }
      if (ConveyorSpeedMPerS != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ConveyorSpeedMPerS);
      }
      if (CounterFactorMm != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CounterFactorMm);
      }
      if (CounterBegin != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CounterBegin);
      }
      if (CounterEnd != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CounterEnd);
      }
      if (data_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DataPositionXInMm != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DataPositionXInMm);
      }
      if (DataPositionYInMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DataPositionYInMm);
      }
      if (Clocktick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Clocktick);
      }
      if (ClocktickDataPositionXInMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ClocktickDataPositionXInMm);
      }
      if (ConveyorSpeedMPerS != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ConveyorSpeedMPerS);
      }
      if (CounterFactorMm != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CounterFactorMm);
      }
      if (CounterBegin != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CounterBegin);
      }
      if (CounterEnd != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CounterEnd);
      }
      if (data_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DataPositionXInMm != 0F) {
        size += 1 + 4;
      }
      if (DataPositionYInMm != 0F) {
        size += 1 + 4;
      }
      if (Clocktick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Clocktick);
      }
      if (ClocktickDataPositionXInMm != 0F) {
        size += 1 + 4;
      }
      if (ConveyorSpeedMPerS != 0F) {
        size += 1 + 4;
      }
      if (CounterFactorMm != 0F) {
        size += 1 + 4;
      }
      if (CounterBegin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CounterBegin);
      }
      if (CounterEnd != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CounterEnd);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GeoData other) {
      if (other == null) {
        return;
      }
      if (other.DataPositionXInMm != 0F) {
        DataPositionXInMm = other.DataPositionXInMm;
      }
      if (other.DataPositionYInMm != 0F) {
        DataPositionYInMm = other.DataPositionYInMm;
      }
      if (other.Clocktick != 0L) {
        Clocktick = other.Clocktick;
      }
      if (other.ClocktickDataPositionXInMm != 0F) {
        ClocktickDataPositionXInMm = other.ClocktickDataPositionXInMm;
      }
      if (other.ConveyorSpeedMPerS != 0F) {
        ConveyorSpeedMPerS = other.ConveyorSpeedMPerS;
      }
      if (other.CounterFactorMm != 0F) {
        CounterFactorMm = other.CounterFactorMm;
      }
      if (other.CounterBegin != 0L) {
        CounterBegin = other.CounterBegin;
      }
      if (other.CounterEnd != 0L) {
        CounterEnd = other.CounterEnd;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Geoimage.Data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DataPositionXInMm = input.ReadFloat();
            break;
          }
          case 21: {
            DataPositionYInMm = input.ReadFloat();
            break;
          }
          case 24: {
            Clocktick = input.ReadInt64();
            break;
          }
          case 37: {
            ClocktickDataPositionXInMm = input.ReadFloat();
            break;
          }
          case 45: {
            ConveyorSpeedMPerS = input.ReadFloat();
            break;
          }
          case 53: {
            CounterFactorMm = input.ReadFloat();
            break;
          }
          case 56: {
            CounterBegin = input.ReadInt64();
            break;
          }
          case 64: {
            CounterEnd = input.ReadInt64();
            break;
          }
          case 74: {
            if (data_ == null) {
              Data = new global::Geoimage.Data();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            DataPositionXInMm = input.ReadFloat();
            break;
          }
          case 21: {
            DataPositionYInMm = input.ReadFloat();
            break;
          }
          case 24: {
            Clocktick = input.ReadInt64();
            break;
          }
          case 37: {
            ClocktickDataPositionXInMm = input.ReadFloat();
            break;
          }
          case 45: {
            ConveyorSpeedMPerS = input.ReadFloat();
            break;
          }
          case 53: {
            CounterFactorMm = input.ReadFloat();
            break;
          }
          case 56: {
            CounterBegin = input.ReadInt64();
            break;
          }
          case 64: {
            CounterEnd = input.ReadInt64();
            break;
          }
          case 74: {
            if (data_ == null) {
              Data = new global::Geoimage.Data();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GeoImage : pb::IMessage<GeoImage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeoImage> _parser = new pb::MessageParser<GeoImage>(() => new GeoImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GeoImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Geoimage.GeoImageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoImage(GeoImage other) : this() {
      imageData_ = other.imageData_;
      format_ = other.format_;
      widthInMm_ = other.widthInMm_;
      widthInPx_ = other.widthInPx_;
      heightInMm_ = other.heightInMm_;
      heightInPx_ = other.heightInPx_;
      conveyorDirection_ = other.conveyorDirection_;
      statusLighting_ = other.statusLighting_;
      filename_ = other.filename_;
      geodata_ = other.geodata_ != null ? other.geodata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GeoImage Clone() {
      return new GeoImage(this);
    }

    /// <summary>Field number for the "image_data" field.</summary>
    public const int ImageDataFieldNumber = 1;
    private pb::ByteString imageData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString ImageData {
      get { return imageData_; }
      set {
        imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private string format_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "width_in_mm" field.</summary>
    public const int WidthInMmFieldNumber = 3;
    private float widthInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WidthInMm {
      get { return widthInMm_; }
      set {
        widthInMm_ = value;
      }
    }

    /// <summary>Field number for the "width_in_px" field.</summary>
    public const int WidthInPxFieldNumber = 4;
    private int widthInPx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WidthInPx {
      get { return widthInPx_; }
      set {
        widthInPx_ = value;
      }
    }

    /// <summary>Field number for the "height_in_mm" field.</summary>
    public const int HeightInMmFieldNumber = 5;
    private float heightInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HeightInMm {
      get { return heightInMm_; }
      set {
        heightInMm_ = value;
      }
    }

    /// <summary>Field number for the "height_in_px" field.</summary>
    public const int HeightInPxFieldNumber = 6;
    private int heightInPx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeightInPx {
      get { return heightInPx_; }
      set {
        heightInPx_ = value;
      }
    }

    /// <summary>Field number for the "conveyor_direction" field.</summary>
    public const int ConveyorDirectionFieldNumber = 7;
    private global::Geoimage.ConveyerDirection conveyorDirection_ = global::Geoimage.ConveyerDirection.Up;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Geoimage.ConveyerDirection ConveyorDirection {
      get { return conveyorDirection_; }
      set {
        conveyorDirection_ = value;
      }
    }

    /// <summary>Field number for the "status_lighting" field.</summary>
    public const int StatusLightingFieldNumber = 8;
    private int statusLighting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StatusLighting {
      get { return statusLighting_; }
      set {
        statusLighting_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 9;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geodata" field.</summary>
    public const int GeodataFieldNumber = 10;
    private global::Geoimage.GeoData geodata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Geoimage.GeoData Geodata {
      get { return geodata_; }
      set {
        geodata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GeoImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GeoImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageData != other.ImageData) return false;
      if (Format != other.Format) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WidthInMm, other.WidthInMm)) return false;
      if (WidthInPx != other.WidthInPx) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightInMm, other.HeightInMm)) return false;
      if (HeightInPx != other.HeightInPx) return false;
      if (ConveyorDirection != other.ConveyorDirection) return false;
      if (StatusLighting != other.StatusLighting) return false;
      if (Filename != other.Filename) return false;
      if (!object.Equals(Geodata, other.Geodata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      if (WidthInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WidthInMm);
      if (WidthInPx != 0) hash ^= WidthInPx.GetHashCode();
      if (HeightInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightInMm);
      if (HeightInPx != 0) hash ^= HeightInPx.GetHashCode();
      if (ConveyorDirection != global::Geoimage.ConveyerDirection.Up) hash ^= ConveyorDirection.GetHashCode();
      if (StatusLighting != 0) hash ^= StatusLighting.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (geodata_ != null) hash ^= Geodata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ImageData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ImageData);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (WidthInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(WidthInMm);
      }
      if (WidthInPx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WidthInPx);
      }
      if (HeightInMm != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HeightInMm);
      }
      if (HeightInPx != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeightInPx);
      }
      if (ConveyorDirection != global::Geoimage.ConveyerDirection.Up) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ConveyorDirection);
      }
      if (StatusLighting != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StatusLighting);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Filename);
      }
      if (geodata_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Geodata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ImageData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ImageData);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
      if (WidthInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(WidthInMm);
      }
      if (WidthInPx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WidthInPx);
      }
      if (HeightInMm != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HeightInMm);
      }
      if (HeightInPx != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HeightInPx);
      }
      if (ConveyorDirection != global::Geoimage.ConveyerDirection.Up) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ConveyorDirection);
      }
      if (StatusLighting != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StatusLighting);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Filename);
      }
      if (geodata_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Geodata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ImageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageData);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      if (WidthInMm != 0F) {
        size += 1 + 4;
      }
      if (WidthInPx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthInPx);
      }
      if (HeightInMm != 0F) {
        size += 1 + 4;
      }
      if (HeightInPx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightInPx);
      }
      if (ConveyorDirection != global::Geoimage.ConveyerDirection.Up) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConveyorDirection);
      }
      if (StatusLighting != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusLighting);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (geodata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Geodata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GeoImage other) {
      if (other == null) {
        return;
      }
      if (other.ImageData.Length != 0) {
        ImageData = other.ImageData;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
      if (other.WidthInMm != 0F) {
        WidthInMm = other.WidthInMm;
      }
      if (other.WidthInPx != 0) {
        WidthInPx = other.WidthInPx;
      }
      if (other.HeightInMm != 0F) {
        HeightInMm = other.HeightInMm;
      }
      if (other.HeightInPx != 0) {
        HeightInPx = other.HeightInPx;
      }
      if (other.ConveyorDirection != global::Geoimage.ConveyerDirection.Up) {
        ConveyorDirection = other.ConveyorDirection;
      }
      if (other.StatusLighting != 0) {
        StatusLighting = other.StatusLighting;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.geodata_ != null) {
        if (geodata_ == null) {
          Geodata = new global::Geoimage.GeoData();
        }
        Geodata.MergeFrom(other.Geodata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageData = input.ReadBytes();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 29: {
            WidthInMm = input.ReadFloat();
            break;
          }
          case 32: {
            WidthInPx = input.ReadInt32();
            break;
          }
          case 45: {
            HeightInMm = input.ReadFloat();
            break;
          }
          case 48: {
            HeightInPx = input.ReadInt32();
            break;
          }
          case 56: {
            ConveyorDirection = (global::Geoimage.ConveyerDirection) input.ReadEnum();
            break;
          }
          case 64: {
            StatusLighting = input.ReadInt32();
            break;
          }
          case 74: {
            Filename = input.ReadString();
            break;
          }
          case 82: {
            if (geodata_ == null) {
              Geodata = new global::Geoimage.GeoData();
            }
            input.ReadMessage(Geodata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ImageData = input.ReadBytes();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
          case 29: {
            WidthInMm = input.ReadFloat();
            break;
          }
          case 32: {
            WidthInPx = input.ReadInt32();
            break;
          }
          case 45: {
            HeightInMm = input.ReadFloat();
            break;
          }
          case 48: {
            HeightInPx = input.ReadInt32();
            break;
          }
          case 56: {
            ConveyorDirection = (global::Geoimage.ConveyerDirection) input.ReadEnum();
            break;
          }
          case 64: {
            StatusLighting = input.ReadInt32();
            break;
          }
          case 74: {
            Filename = input.ReadString();
            break;
          }
          case 82: {
            if (geodata_ == null) {
              Geodata = new global::Geoimage.GeoData();
            }
            input.ReadMessage(Geodata);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
